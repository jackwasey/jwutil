// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "jwutil_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// get_cpplib
Rcpp::CharacterVector get_cpplib();
RcppExport SEXP _jwutil_get_cpplib() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_cpplib());
    return rcpp_result_gen;
END_RCPP
}
// getOmpMaxThreads
int getOmpMaxThreads();
RcppExport SEXP _jwutil_getOmpMaxThreads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getOmpMaxThreads());
    return rcpp_result_gen;
END_RCPP
}
// getOmpThreads
int getOmpThreads();
RcppExport SEXP _jwutil_getOmpThreads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getOmpThreads());
    return rcpp_result_gen;
END_RCPP
}
// isRowSorted
LogicalVector isRowSorted(NumericMatrix x);
RcppExport SEXP _jwutil_isRowSorted(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(isRowSorted(x));
    return rcpp_result_gen;
END_RCPP
}
// propRowSorted
double propRowSorted(NumericMatrix x);
RcppExport SEXP _jwutil_propRowSorted(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(propRowSorted(x));
    return rcpp_result_gen;
END_RCPP
}
// stdlib_gnu
bool stdlib_gnu();
RcppExport SEXP _jwutil_stdlib_gnu() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(stdlib_gnu());
    return rcpp_result_gen;
END_RCPP
}
// stdlib_llvm
bool stdlib_llvm();
RcppExport SEXP _jwutil_stdlib_llvm() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(stdlib_llvm());
    return rcpp_result_gen;
END_RCPP
}
// fastIntToStringStd
std::vector<std::string> fastIntToStringStd(std::vector<int> x);
RcppExport SEXP _jwutil_fastIntToStringStd(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fastIntToStringStd(x));
    return rcpp_result_gen;
END_RCPP
}
// fastIntToStringRcpp
Rcpp::CharacterVector fastIntToStringRcpp(Rcpp::IntegerVector x);
RcppExport SEXP _jwutil_fastIntToStringRcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fastIntToStringRcpp(x));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests();

static const R_CallMethodDef CallEntries[] = {
    {"_jwutil_get_cpplib", (DL_FUNC) &_jwutil_get_cpplib, 0},
    {"_jwutil_getOmpMaxThreads", (DL_FUNC) &_jwutil_getOmpMaxThreads, 0},
    {"_jwutil_getOmpThreads", (DL_FUNC) &_jwutil_getOmpThreads, 0},
    {"_jwutil_isRowSorted", (DL_FUNC) &_jwutil_isRowSorted, 1},
    {"_jwutil_propRowSorted", (DL_FUNC) &_jwutil_propRowSorted, 1},
    {"_jwutil_stdlib_gnu", (DL_FUNC) &_jwutil_stdlib_gnu, 0},
    {"_jwutil_stdlib_llvm", (DL_FUNC) &_jwutil_stdlib_llvm, 0},
    {"_jwutil_fastIntToStringStd", (DL_FUNC) &_jwutil_fastIntToStringStd, 1},
    {"_jwutil_fastIntToStringRcpp", (DL_FUNC) &_jwutil_fastIntToStringRcpp, 1},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_jwutil(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

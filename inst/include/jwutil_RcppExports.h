// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_jwutil_RCPPEXPORTS_H_GEN_
#define RCPP_jwutil_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace jwutil {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("jwutil", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("jwutil", "_jwutil_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in jwutil");
            }
        }
    }

    inline void set_attr_in_place(Rcpp::RObject& x, Rcpp::String name, SEXP value) {
        typedef SEXP(*Ptr_set_attr_in_place)(SEXP,SEXP,SEXP);
        static Ptr_set_attr_in_place p_set_attr_in_place = NULL;
        if (p_set_attr_in_place == NULL) {
            validateSignature("void(*set_attr_in_place)(Rcpp::RObject&,Rcpp::String,SEXP)");
            p_set_attr_in_place = (Ptr_set_attr_in_place)R_GetCCallable("jwutil", "_jwutil_set_attr_in_place");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_set_attr_in_place(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(name)), Shield<SEXP>(Rcpp::wrap(value)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline int getOmpMaxThreads() {
        typedef SEXP(*Ptr_getOmpMaxThreads)();
        static Ptr_getOmpMaxThreads p_getOmpMaxThreads = NULL;
        if (p_getOmpMaxThreads == NULL) {
            validateSignature("int(*getOmpMaxThreads)()");
            p_getOmpMaxThreads = (Ptr_getOmpMaxThreads)R_GetCCallable("jwutil", "_jwutil_getOmpMaxThreads");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_getOmpMaxThreads();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<int >(rcpp_result_gen);
    }

    inline int getOmpThreads() {
        typedef SEXP(*Ptr_getOmpThreads)();
        static Ptr_getOmpThreads p_getOmpThreads = NULL;
        if (p_getOmpThreads == NULL) {
            validateSignature("int(*getOmpThreads)()");
            p_getOmpThreads = (Ptr_getOmpThreads)R_GetCCallable("jwutil", "_jwutil_getOmpThreads");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_getOmpThreads();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<int >(rcpp_result_gen);
    }

    inline LogicalVector isRowSorted(NumericMatrix x) {
        typedef SEXP(*Ptr_isRowSorted)(SEXP);
        static Ptr_isRowSorted p_isRowSorted = NULL;
        if (p_isRowSorted == NULL) {
            validateSignature("LogicalVector(*isRowSorted)(NumericMatrix)");
            p_isRowSorted = (Ptr_isRowSorted)R_GetCCallable("jwutil", "_jwutil_isRowSorted");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_isRowSorted(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<LogicalVector >(rcpp_result_gen);
    }

    inline double propRowSorted(NumericMatrix x) {
        typedef SEXP(*Ptr_propRowSorted)(SEXP);
        static Ptr_propRowSorted p_propRowSorted = NULL;
        if (p_propRowSorted == NULL) {
            validateSignature("double(*propRowSorted)(NumericMatrix)");
            p_propRowSorted = (Ptr_propRowSorted)R_GetCCallable("jwutil", "_jwutil_propRowSorted");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_propRowSorted(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline std::vector<std::string> fastIntToStringStd(std::vector<int> x) {
        typedef SEXP(*Ptr_fastIntToStringStd)(SEXP);
        static Ptr_fastIntToStringStd p_fastIntToStringStd = NULL;
        if (p_fastIntToStringStd == NULL) {
            validateSignature("std::vector<std::string>(*fastIntToStringStd)(std::vector<int>)");
            p_fastIntToStringStd = (Ptr_fastIntToStringStd)R_GetCCallable("jwutil", "_jwutil_fastIntToStringStd");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fastIntToStringStd(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<std::vector<std::string> >(rcpp_result_gen);
    }

    inline Rcpp::CharacterVector fastIntToStringRcpp(Rcpp::IntegerVector x) {
        typedef SEXP(*Ptr_fastIntToStringRcpp)(SEXP);
        static Ptr_fastIntToStringRcpp p_fastIntToStringRcpp = NULL;
        if (p_fastIntToStringRcpp == NULL) {
            validateSignature("Rcpp::CharacterVector(*fastIntToStringRcpp)(Rcpp::IntegerVector)");
            p_fastIntToStringRcpp = (Ptr_fastIntToStringRcpp)R_GetCCallable("jwutil", "_jwutil_fastIntToStringRcpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fastIntToStringRcpp(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::CharacterVector >(rcpp_result_gen);
    }

}

#endif // RCPP_jwutil_RCPPEXPORTS_H_GEN_
